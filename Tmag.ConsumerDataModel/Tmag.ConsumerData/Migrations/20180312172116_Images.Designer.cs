// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Tmag.ConsumerData;

namespace Tmag.ConsumerData.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180312172116_Images")]
    partial class Images
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tmag.ConsumerData.Models.Address", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id");

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(2000);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(2000);

                    b.Property<string>("AddressLine3")
                        .HasColumnName("address_line_3")
                        .HasMaxLength(2000);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(2000);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(2000);

                    b.Property<Guid>("SystemId")
                        .HasColumnName("system_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.BagModel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bag_model_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Type")
                        .HasColumnName("point_of_purchase")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("bag_models");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.BagPanelFont", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bag_panel_font_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Type")
                        .HasColumnName("font_type")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("bag_panel_fonts");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Brand", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id");

                    b.Property<Guid?>("ClubCategoryId")
                        .HasColumnName("club_category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasColumnName("brand_name")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubCategory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasColumnName("category_name")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("club_categories");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubCategoryType", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_category_types_id");

                    b.Property<Guid>("ClubCategoryId")
                        .HasColumnName("club_category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Type")
                        .HasColumnName("category_type")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClubCategoryId");

                    b.ToTable("club_category_types");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubHand", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_hand_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasColumnName("club_hand_desc")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("club_hand");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubLie", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_lie_id");

                    b.Property<Guid?>("ClubCategoryId");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .HasColumnName("lie_value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClubCategoryId");

                    b.ToTable("club_lies");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubLoft", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_loft_id");

                    b.Property<Guid?>("ClubCategoryId")
                        .HasColumnName("club_category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .HasColumnName("loft_value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClubCategoryId");

                    b.ToTable("club_lofts");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubLoftAdjustment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_lofts_adjustment_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .HasColumnName("loft_adjustment_value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("club_lofts_adjustment");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubShaftFlex", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_shaft_flex_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .HasColumnName("flex_value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("club_shaft_flexs");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubShaftLength", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("club_shaft_length_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsMinorAdjustment")
                        .HasColumnName("is_minor_adjustment");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order");

                    b.Property<string>("Value")
                        .HasColumnName("length_value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("club_shaft_lengths");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Consumer", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(2000);

                    b.Property<string>("FirstNameKana")
                        .HasColumnName("first_name_kana")
                        .HasMaxLength(2000);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("GenderId")
                        .HasColumnName("gender_id");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(2000);

                    b.Property<string>("LastNameKana")
                        .HasColumnName("last_name_kana")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnName("primary_email")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("PrimaryEmail")
                        .IsUnique()
                        .HasFilter("[primary_email] IS NOT NULL");

                    b.ToTable("consumers");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerAudit", b =>
                {
                    b.Property<Guid?>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(2000);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("Id")
                        .HasColumnName("consumer_id");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnName("primary_email")
                        .HasMaxLength(2000);

                    b.HasKey("AuditId");

                    b.ToTable("consumers_audit");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerBagPanelCampaign", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_bag_panel_campaign_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("BagColor")
                        .HasColumnName("bag_color")
                        .HasMaxLength(2000);

                    b.Property<Guid>("BagModelId")
                        .HasColumnName("bag_model_id");

                    b.Property<Guid>("BagPanelFontId")
                        .HasColumnName("panel_font_id");

                    b.Property<string>("BagTopQuality")
                        .HasColumnName("bag_top_quality")
                        .HasMaxLength(2000);

                    b.Property<string>("BagUsage")
                        .HasColumnName("bag_usage")
                        .HasMaxLength(2000);

                    b.Property<string>("BestFeature")
                        .HasColumnName("best_feature")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("ConsumerId");

                    b.Property<Guid>("ConsumerProfileId")
                        .HasColumnName("consumer_profile_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("ItemNumber")
                        .HasColumnName("item_number")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("OptInBrand")
                        .HasColumnName("opt_in_brand")
                        .HasMaxLength(2000);

                    b.Property<Guid>("PointOfPurchaseId")
                        .HasColumnName("point_of_purchase");

                    b.Property<string>("Sku")
                        .HasColumnName("sku")
                        .HasMaxLength(2000);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasMaxLength(2000);

                    b.Property<string>("TextLine1")
                        .HasColumnName("text_line_1")
                        .HasMaxLength(2000);

                    b.Property<string>("TextLine2")
                        .HasColumnName("text_line_2")
                        .HasMaxLength(2000);

                    b.Property<string>("TextLine3")
                        .HasColumnName("text_line_3")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BagModelId");

                    b.HasIndex("BagPanelFontId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ConsumerProfileId");

                    b.HasIndex("PointOfPurchaseId");

                    b.ToTable("consumer_bag_panel_campaigns");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerEmail", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_email_id");

                    b.Property<Guid?>("ConsumerMasterId");

                    b.Property<Guid>("ConsumerProfileId")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("RegionId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ConsumerMasterId");

                    b.HasIndex("RegionId");

                    b.ToTable("consumer_emails");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerExperience", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_experience_id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<Guid>("ConsumerProfileId")
                        .HasColumnName("consumer_profile_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("EventName")
                        .HasColumnName("event_name")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ExperienceDate")
                        .HasColumnName("experience_date");

                    b.Property<Guid?>("ExperienceLocationId");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("RetailStoreId")
                        .HasColumnName("location");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[address_id] IS NOT NULL");

                    b.HasIndex("ConsumerProfileId");

                    b.HasIndex("ExperienceLocationId");

                    b.HasIndex("RetailStoreId");

                    b.ToTable("consumer_experiences");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerExperienceTransfer", b =>
                {
                    b.Property<string>("consumerEmail")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2000);

                    b.Property<string>("address1")
                        .HasMaxLength(2000);

                    b.Property<string>("address2")
                        .HasMaxLength(2000);

                    b.Property<string>("city")
                        .HasMaxLength(2000);

                    b.Property<string>("consumerFirstName")
                        .HasMaxLength(2000);

                    b.Property<string>("consumerLastName")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("experienceDate");

                    b.Property<string>("locationName")
                        .HasMaxLength(2000);

                    b.Property<string>("postalCode")
                        .HasMaxLength(2000);

                    b.Property<string>("state")
                        .HasMaxLength(2000);

                    b.HasKey("consumerEmail");

                    b.ToTable("myFittingExp-Prod-Experiences-M");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerOptIn", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_opt_in_id");

                    b.Property<bool>("Allowed")
                        .HasColumnName("allowed");

                    b.Property<bool>("Brand")
                        .HasColumnName("taylormade_brand");

                    b.Property<Guid>("ConsumerProfileId")
                        .HasColumnName("consumer_profile_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<bool>("EmailOnly")
                        .HasColumnName("emailOnly");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<bool>("MyFittingExp")
                        .HasColumnName("my_fitting_exp");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerProfileId");

                    b.ToTable("consumer_opt_in");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerProfile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consumer_profile_id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("MemberRank")
                        .HasColumnName("member_rank")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasMaxLength(2000);

                    b.Property<string>("PhoneCell")
                        .HasColumnName("phone_cell")
                        .HasMaxLength(2000);

                    b.Property<string>("PhoneHome")
                        .HasColumnName("phone_home")
                        .HasMaxLength(2000);

                    b.Property<Guid>("RegionId")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[address_id] IS NOT NULL");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("RegionId")
                        .IsUnique();

                    b.HasIndex("RegionId", "ConsumerId")
                        .IsUnique();

                    b.ToTable("consumer_profile");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ExperienceLocation", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("experience_location_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasColumnName("location_name")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("experience_location");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.GolferProfile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("golfer_profile_id");

                    b.Property<Guid?>("ClubHandId")
                        .HasColumnName("club_hand_id");

                    b.Property<Guid?>("ClubLoftAdjustmentId");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Current7IronBallFlight")
                        .HasColumnName("current_7iron_ball_flight")
                        .HasMaxLength(2000);

                    b.Property<string>("CurrentDriverBallFlight")
                        .HasColumnName("current_driver_ball_flight")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("CurrentDriverFlexId")
                        .HasColumnName("current_driver_flex_id");

                    b.Property<Guid?>("CurrentIronLengthId")
                        .HasColumnName("current_iron_length_id");

                    b.Property<Guid?>("CurrentIronLieId")
                        .HasColumnName("current_iron_lie_id");

                    b.Property<string>("Desired7IronBallFlight")
                        .HasColumnName("desired_7iron_ball_flight")
                        .HasMaxLength(2000);

                    b.Property<string>("DesiredDriverBallFlight")
                        .HasColumnName("desired_driver_ball_flight")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("DesiredDriverFlexId")
                        .HasColumnName("desired_driver_flex_id");

                    b.Property<Guid?>("DriverLoftId")
                        .HasColumnName("driver_loft_id");

                    b.Property<int?>("Handicap")
                        .HasColumnName("handicap");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<int>("RoundsPerMonth")
                        .HasColumnName("rounds_per_month");

                    b.Property<string>("Typical7IronDistance")
                        .HasColumnName("typical_7iron_distance")
                        .HasMaxLength(2000);

                    b.Property<string>("TypicalDriverDistance")
                        .HasColumnName("typical_driver_distance")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("ClubHandId");

                    b.HasIndex("ClubLoftAdjustmentId");

                    b.HasIndex("ConsumerId")
                        .IsUnique();

                    b.HasIndex("CurrentDriverFlexId");

                    b.HasIndex("CurrentIronLengthId");

                    b.HasIndex("CurrentIronLieId");

                    b.HasIndex("DesiredDriverFlexId");

                    b.HasIndex("DriverLoftId");

                    b.ToTable("golfer_profile");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.HandicapRange", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("handicap_range_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Range")
                        .HasColumnName("range")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("handicap_range");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.MfeUserIds", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("F1")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("mfe-userIds");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Model", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("model_id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnName("club_brand_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("ImageOne")
                        .HasColumnName("image_one")
                        .HasMaxLength(2000);

                    b.Property<string>("ImageThree")
                        .HasColumnName("image_three")
                        .HasMaxLength(2000);

                    b.Property<string>("ImageTwo")
                        .HasColumnName("image_two")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .HasColumnName("model_name")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("ThirdPartyId")
                        .HasColumnName("third_party_id");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("model");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.PointOfPurchase", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("point_of_purchase_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Type")
                        .HasColumnName("point_of_purchase")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("point_of_purchase");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Region", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("region_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("region_code")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasColumnName("region_desc")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("region");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.RetailStore", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("retail_store_id");

                    b.Property<Guid>("BillingAddressId")
                        .HasColumnName("billing_address");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("ConsumerMasterId");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsCertifiedLocation")
                        .HasColumnName("is_certified_location");

                    b.Property<bool>("IsFittingLocation")
                        .HasColumnName("is_fitting_location");

                    b.Property<bool>("IsPremiumLocation")
                        .HasColumnName("is_premium_location");

                    b.Property<bool>("IsTmStudio")
                        .HasColumnName("is_tm_studio");

                    b.Property<bool>("IsTmplLocation")
                        .HasColumnName("is_tmpl_location");

                    b.Property<string>("LeadRank")
                        .HasColumnName("leadrank")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("PhoneFax")
                        .HasColumnName("phone_fax")
                        .HasMaxLength(2000);

                    b.Property<string>("PhoneOffice")
                        .HasColumnName("phone_office")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("RegionId");

                    b.Property<string>("ShipToId")
                        .HasColumnName("shipto")
                        .HasMaxLength(2000);

                    b.Property<string>("StoreHours")
                        .HasColumnName("store_hours")
                        .HasMaxLength(2000);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId")
                        .IsUnique();

                    b.HasIndex("ConsumerMasterId");

                    b.HasIndex("RegionId");

                    b.ToTable("retail_store");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.System", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("system_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("IdentityId")
                        .HasColumnName("identity_id");

                    b.Property<string>("IpEndRange")
                        .HasColumnName("ip_end_range")
                        .HasMaxLength(2000);

                    b.Property<string>("IpStartRange")
                        .HasColumnName("ip_start_range")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<string>("name")
                        .HasColumnName("name")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("systems");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.SystemToConsumerProfile", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("system_to_consumer_profile_id");

                    b.Property<Guid>("ConsumerProfileId")
                        .HasColumnName("consumer_profile_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<Guid>("SystemId")
                        .HasColumnName("system_id");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerProfileId");

                    b.HasIndex("SystemId");

                    b.ToTable("system_to_consumer_profile");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.WhatsInTheBag", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("whats_in_the_bag_id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnName("brand_id");

                    b.Property<Guid?>("ClubCategoryId")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("ClubCategoryTypeId")
                        .HasColumnName("club_category_type_id");

                    b.Property<Guid?>("ClubLoftId")
                        .HasColumnName("loft");

                    b.Property<Guid?>("ClubShaftFlexId")
                        .HasColumnName("flex");

                    b.Property<Guid?>("ClubShaftLengthId")
                        .HasColumnName("shaft_length_id");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasMaxLength(2000);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<Guid?>("FaceLieAdjustmentId")
                        .HasColumnName("face_lie_adjustment");

                    b.Property<Guid?>("FaceLoftAdjustmentId")
                        .HasColumnName("face_loft_adjustment");

                    b.Property<bool>("Favorite")
                        .HasColumnName("favorite");

                    b.Property<Guid?>("GolferProfileId")
                        .HasColumnName("golfer_profile_id");

                    b.Property<Guid?>("ModelId")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("modified_by")
                        .HasMaxLength(2000);

                    b.Property<bool>("PlanToPurchase")
                        .HasColumnName("plan_to_purchase");

                    b.Property<string>("Sku")
                        .HasColumnName("sku")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ClubCategoryId");

                    b.HasIndex("ClubCategoryTypeId");

                    b.HasIndex("ClubLoftId");

                    b.HasIndex("ClubShaftFlexId");

                    b.HasIndex("ClubShaftLengthId");

                    b.HasIndex("FaceLieAdjustmentId");

                    b.HasIndex("FaceLoftAdjustmentId");

                    b.HasIndex("GolferProfileId");

                    b.HasIndex("ModelId");

                    b.ToTable("whats_in_the_bag");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Address", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.System", "System")
                        .WithMany("Addresses")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubCategoryType", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ClubCategory", "ClubCategory")
                        .WithMany("ClubCategoryTypes")
                        .HasForeignKey("ClubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubLie", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ClubCategory")
                        .WithMany("ClubLies")
                        .HasForeignKey("ClubCategoryId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ClubLoft", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ClubCategory", "ClubCategory")
                        .WithMany()
                        .HasForeignKey("ClubCategoryId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerBagPanelCampaign", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Address", "Address")
                        .WithOne("ConsumerBagPanelCampaign")
                        .HasForeignKey("Tmag.ConsumerData.Models.ConsumerBagPanelCampaign", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.BagModel", "BagModel")
                        .WithMany("ConsumerBagPanelCampaigns")
                        .HasForeignKey("BagModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.BagPanelFont", "BagPanelFont")
                        .WithMany("ConsumerBagPanelCampaigns")
                        .HasForeignKey("BagPanelFontId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.Consumer")
                        .WithMany("ConsumerBagPanelCampaigns")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("Tmag.ConsumerData.Models.ConsumerProfile", "ConsumerProfile")
                        .WithMany()
                        .HasForeignKey("ConsumerProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.PointOfPurchase", "PointOfPurchase")
                        .WithMany("ConsumerBagPanelCampaigns")
                        .HasForeignKey("PointOfPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerEmail", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Consumer", "ConsumerMaster")
                        .WithMany()
                        .HasForeignKey("ConsumerMasterId");

                    b.HasOne("Tmag.ConsumerData.Models.Region")
                        .WithMany("ConsumerEmails")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerExperience", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Address", "Address")
                        .WithOne("ConsumerExperiences")
                        .HasForeignKey("Tmag.ConsumerData.Models.ConsumerExperience", "AddressId");

                    b.HasOne("Tmag.ConsumerData.Models.ConsumerProfile", "ConsumerProfile")
                        .WithMany("ConsumerExperiences")
                        .HasForeignKey("ConsumerProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.ExperienceLocation")
                        .WithMany("ConsumerExperiences")
                        .HasForeignKey("ExperienceLocationId");

                    b.HasOne("Tmag.ConsumerData.Models.RetailStore", "RetailStore")
                        .WithMany()
                        .HasForeignKey("RetailStoreId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerOptIn", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ConsumerProfile", "ConsumerProfile")
                        .WithMany("ConsumerOptIns")
                        .HasForeignKey("ConsumerProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.ConsumerProfile", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Address", "Address")
                        .WithOne("ConsumerProfile")
                        .HasForeignKey("Tmag.ConsumerData.Models.ConsumerProfile", "AddressId");

                    b.HasOne("Tmag.ConsumerData.Models.Consumer", "Consumer")
                        .WithMany("ConsumerProfiles")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.Region", "Region")
                        .WithMany("ConsumerProfiles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.GolferProfile", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ClubHand", "ClubHand")
                        .WithMany("GolferProfiles")
                        .HasForeignKey("ClubHandId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLoftAdjustment")
                        .WithMany("GolferProfiles")
                        .HasForeignKey("ClubLoftAdjustmentId");

                    b.HasOne("Tmag.ConsumerData.Models.Consumer", "Consumer")
                        .WithOne("GolferProfile")
                        .HasForeignKey("Tmag.ConsumerData.Models.GolferProfile", "ConsumerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.ClubShaftFlex", "CurrentDriverFlex")
                        .WithMany()
                        .HasForeignKey("CurrentDriverFlexId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubShaftLength", "CurrentIronLength")
                        .WithMany("GolferProfiles")
                        .HasForeignKey("CurrentIronLengthId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLie", "CurrentIronLie")
                        .WithMany()
                        .HasForeignKey("CurrentIronLieId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubShaftFlex", "DesiredDriverFlex")
                        .WithMany()
                        .HasForeignKey("DesiredDriverFlexId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLoft", "DriverLoft")
                        .WithMany("GolferProfiles")
                        .HasForeignKey("DriverLoftId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.Model", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.RetailStore", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Address", "BillingAddress")
                        .WithOne("RetailStore")
                        .HasForeignKey("Tmag.ConsumerData.Models.RetailStore", "BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.Consumer", "ConsumerMaster")
                        .WithMany()
                        .HasForeignKey("ConsumerMasterId");

                    b.HasOne("Tmag.ConsumerData.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.SystemToConsumerProfile", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.ConsumerProfile", "ConsumerProfile")
                        .WithMany("SystemToConsumerProfiles")
                        .HasForeignKey("ConsumerProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tmag.ConsumerData.Models.System", "System")
                        .WithMany("SystemToConsumerProfiles")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tmag.ConsumerData.Models.WhatsInTheBag", b =>
                {
                    b.HasOne("Tmag.ConsumerData.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubCategory", "ClubCategory")
                        .WithMany()
                        .HasForeignKey("ClubCategoryId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubCategoryType", "ClubCategoryType")
                        .WithMany()
                        .HasForeignKey("ClubCategoryTypeId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLoft", "ClubLoft")
                        .WithMany()
                        .HasForeignKey("ClubLoftId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubShaftFlex", "ClubShaftFlex")
                        .WithMany()
                        .HasForeignKey("ClubShaftFlexId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubShaftLength", "ClubShaftLength")
                        .WithMany()
                        .HasForeignKey("ClubShaftLengthId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLie", "FaceLieAdjustment")
                        .WithMany()
                        .HasForeignKey("FaceLieAdjustmentId");

                    b.HasOne("Tmag.ConsumerData.Models.ClubLoftAdjustment", "FaceLoftAdjustment")
                        .WithMany()
                        .HasForeignKey("FaceLoftAdjustmentId");

                    b.HasOne("Tmag.ConsumerData.Models.GolferProfile", "GolferProfile")
                        .WithMany("WhatsInTheBags")
                        .HasForeignKey("GolferProfileId");

                    b.HasOne("Tmag.ConsumerData.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
